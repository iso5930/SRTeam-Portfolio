#include "TextureTerrain.h"

ENGINE::CTextureTerrain::CTextureTerrain(void)
{

}

ENGINE::CTextureTerrain::~CTextureTerrain(void)
{
	
}

ENGINE::CTextureTerrain* ENGINE::CTextureTerrain::Create(
	DWORD _dwCountX,
	DWORD _dwCountZ,
	DWORD _dwInterval)
{
	CTextureTerrain* pInstance = new CTextureTerrain;
	HRESULT hr = pInstance->Initialize(_dwCountX, _dwCountZ, _dwInterval);
	if FAILED(hr)
		SAFE_DELETE(pInstance);

	return pInstance;
}

HRESULT ENGINE::CTextureTerrain::Initialize(
	DWORD _dwCountX,
	DWORD _dwCountZ,
	DWORD _dwInterval)
{
	m_dwVertexSize = sizeof(VERTEX_TEXTURE);
	m_dwVertexCount = _dwCountX * _dwCountZ;
	m_dwVertexFVF = VERTEX_TEXTURE_FVF;
	m_dwTriangleCount = (_dwCountX - 1) * (_dwCountZ - 1) * 2;

	m_dwIndexSize = sizeof(INDEX32);
	m_IndexFormat = D3DFMT_INDEX32;

	HRESULT hr = CVIBuffer::Initialize();
	if FAILED(hr)
		return hr;

	DWORD* pPixel = LoadTerrainImage();

	VERTEX_TEXTURE* pVertexTexture = NULL;
	m_pVertexBuffer->Lock(0, 0, (void**)&pVertexTexture, 0);
	
	int iIndex = 0;
	for (DWORD z = 0; z < _dwCountZ; ++z)
	{
		for (DWORD x = 0; x < _dwCountX; ++x)
		{
			iIndex = z * _dwCountX + x;

			SetD3DXVector3(
				&pVertexTexture[iIndex].vPos,
				float(x * _dwInterval),
				(pPixel[iIndex] & 0x000000ff) / 100.f,
				float(z * _dwInterval));
			SetD3DXVector2(
				&pVertexTexture[iIndex].vTex,
				(x / (_dwCountX - 1.f)),
				(z / (_dwCountZ - 1.f)));
		}
	}

	m_pVertexBuffer->Unlock();

	INDEX32* pIndex = NULL;
	m_pIndexBuffer->Lock(0, 0, (void**)&pIndex, 0);

	iIndex = 0;
	int iTriangleCount = 0;
	for (DWORD z = 0; z < _dwCountZ - 1; ++z)
	{
		for (DWORD x = 0; x < _dwCountX - 1; ++x)
		{
			iIndex = z * _dwCountX + x;

			SetIndex32(&pIndex[iTriangleCount], iIndex + _dwCountX, iIndex + _dwCountX + 1, iIndex + 1);
			++iTriangleCount;

			SetIndex32(&pIndex[iTriangleCount], iIndex + _dwCountX, iIndex + 1, iIndex);
			++iTriangleCount;
		}
	}

	m_pIndexBuffer->Unlock();
	SAFE_DELETE_ARRAY(pPixel);

	return S_OK;
}

DWORD* ENGINE::CTextureTerrain::LoadTerrainImage(void)
{
	HANDLE hFile = CreateFile(
		L"../bin/Resources/Texture/Terrain/Height.bmp",
		GENERIC_READ,
		0,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		0);

	BITMAPFILEHEADER fh;
	BITMAPINFOHEADER ih;
	DWORD dw = 0;
	ReadFile(hFile, &fh, sizeof(fh), &dw, NULL);
	ReadFile(hFile, &ih, sizeof(ih), &dw, NULL);

	DWORD* pPixel = new DWORD[ih.biWidth * ih.biHeight];
	ReadFile(hFile, pPixel, sizeof(DWORD) * ih.biWidth * ih.biHeight, &dw, NULL);

	CloseHandle(hFile);
	return pPixel;
}
